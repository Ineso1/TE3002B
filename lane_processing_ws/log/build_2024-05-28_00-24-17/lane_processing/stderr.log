[01m[K/home/puzzlebot/Desktop/PUXXY_NODE/TE3002B/lane_processing_ws/src/lane_processing/src/lib/lane_funcs.cpp:[m[K In function â€˜[01m[Kstd::vector<cv::Vec<double, 2> > group_similar_lines(const std::vector<cv::Vec<double, 4> >&, double, int)[m[Kâ€™:
[01m[K/home/puzzlebot/Desktop/PUXXY_NODE/TE3002B/lane_processing_ws/src/lane_processing/src/lib/lane_funcs.cpp:21:23:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<cv::Point_<double> >::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wsign-compare[m[K]
     for (int i = 0; [01;35m[Ki < midpoints.size()[m[K; ++i) {
                     [01;35m[K~~^~~~~~~~~~~~~~~~~~[m[K
[01m[K/home/puzzlebot/Desktop/PUXXY_NODE/TE3002B/lane_processing_ws/src/lane_processing/src/lib/lane_funcs.cpp:25:27:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<cv::Point_<double> >::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wsign-compare[m[K]
         for (int j = 0; [01;35m[Kj < midpoints.size()[m[K; ++j) {
                         [01;35m[K~~^~~~~~~~~~~~~~~~~~[m[K
[01m[K/home/puzzlebot/Desktop/PUXXY_NODE/TE3002B/lane_processing_ws/src/lane_processing/src/lib/lane_funcs.cpp:31:30:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kstd::vector<int>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} and â€˜[01m[Kint[m[Kâ€™ [[01;35m[K-Wsign-compare[m[K]
         if ([01;35m[Kneighbors.size() < minPts[m[K) {
             [01;35m[K~~~~~~~~~~~~~~~~~^~~~~~~~[m[K
[01m[K/home/puzzlebot/Desktop/PUXXY_NODE/TE3002B/lane_processing_ws/src/lane_processing/src/lib/lane_funcs.cpp:39:22:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<int>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wsign-compare[m[K]
         while ([01;35m[Kindex < seeds.size()[m[K) {
                [01;35m[K~~~~~~^~~~~~~~~~~~~~[m[K
[01m[K/home/puzzlebot/Desktop/PUXXY_NODE/TE3002B/lane_processing_ws/src/lane_processing/src/lib/lane_funcs.cpp:46:31:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<cv::Point_<double> >::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wsign-compare[m[K]
             for (int j = 0; [01;35m[Kj < midpoints.size()[m[K; ++j) {
                             [01;35m[K~~^~~~~~~~~~~~~~~~~~[m[K
[01m[K/home/puzzlebot/Desktop/PUXXY_NODE/TE3002B/lane_processing_ws/src/lane_processing/src/lib/lane_funcs.cpp:52:34:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kstd::vector<int>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} and â€˜[01m[Kint[m[Kâ€™ [[01;35m[K-Wsign-compare[m[K]
             if ([01;35m[Kneighbors.size() >= minPts[m[K) {
                 [01;35m[K~~~~~~~~~~~~~~~~~^~~~~~~~~[m[K
[01m[K/home/puzzlebot/Desktop/PUXXY_NODE/TE3002B/lane_processing_ws/src/lane_processing/src/lib/lane_funcs.cpp:62:23:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<cv::Point_<double> >::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wsign-compare[m[K]
     for (int i = 0; [01;35m[Ki < midpoints.size()[m[K; ++i) {
                     [01;35m[K~~^~~~~~~~~~~~~~~~~~[m[K
[01m[K/home/puzzlebot/Desktop/PUXXY_NODE/TE3002B/lane_processing_ws/src/lane_processing/src/lib/lane_funcs.cpp:70:23:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<cv::Vec<double, 2> >::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wsign-compare[m[K]
     for (int i = 0; [01;35m[Ki < cluster_centers.size()[m[K; ++i) {
                     [01;35m[K~~^~~~~~~~~~~~~~~~~~~~~~~~[m[K
